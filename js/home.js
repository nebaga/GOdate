document.addEventListener('DOMContentLoaded', () => {
  const createRouteHeaderBtn = document.getElementById('createRouteHeaderBtn');
  if (createRouteHeaderBtn) {
    createRouteHeaderBtn.addEventListener('click', () => { location.href = 'create-route.html'; });
  }

  const dailyButtons = Array.from(document.querySelectorAll('[data-daily]'));

  async function refreshDailyUI() {
    try {
      const info = await API.dailyToday();
      const isCompleted = !!info.completed;
      dailyButtons.forEach(btn => {
        btn.disabled = isCompleted;
        btn.textContent = isCompleted ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–í—ã–ø–æ–ª–Ω–∏—Ç—å';
      });
    } catch (e) {
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    }
  }

  dailyButtons.forEach(btn => {
    btn.addEventListener('click', async () => {
      try {
        await API.dailyComplete();
        UI.showModal('–î–µ–π–ª–∏–∫', '–ó–∞—Å—á–∏—Ç–∞–Ω–æ! –†–µ–π—Ç–∏–Ω–≥ —É–≤–µ–ª–∏—á–µ–Ω.');
      } catch (e) {
        // –ï—Å–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–º UI –±–µ–∑ –ø–æ–∫–∞–∑a –æ—à–∏–±–∫–∏
        if (String(e.message || '').includes('–î–µ–π–ª–∏–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω')) {
          // no-op
        } else {
          UI.showModal('–û—à–∏–±–∫–∞', e.message);
        }
      } finally {
        await refreshDailyUI();
      }
    });
  });

  function formatHHMMSS(ms) {
    const totalSeconds = Math.max(0, Math.floor(ms / 1000));
    const h = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
    const m = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');
    const s = String(totalSeconds % 60).padStart(2, '0');
    return `${h}:${m}:${s}`;
  }

  function getMsUntilMoscowMidnight() {
    const now = new Date();
    const tzOffsetMs = now.getTimezoneOffset() * 60000; // —Ä–∞–∑–Ω–∏—Ü–∞ —Å UTC –≤ –º—Å
    const utcNowMs = now.getTime() + tzOffsetMs;
    const mskOffsetMs = 3 * 60 * 60 * 1000; // UTC+3
    const mskNowMs = utcNowMs + mskOffsetMs;
    const mskNow = new Date(mskNowMs);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, —Ç—Ä–∞–∫—Ç—É—è mskNow –∫–∞–∫ MSK-–≤—Ä–µ–º—è
    const y = mskNow.getUTCFullYear();
    const m = mskNow.getUTCMonth();
    const d = mskNow.getUTCDate();
    const nextMidnightMskUtcMs = Date.UTC(y, m, d + 1, 0, 0, 0, 0) - mskOffsetMs;
    return Math.max(0, nextMidnightMskUtcMs - utcNowMs);
  }

  function startDailyCountdown() {
    const timerEl = document.getElementById('dailyTimer');
    if (!timerEl) return;
    const tick = async () => {
      const msLeft = getMsUntilMoscowMidnight();
      timerEl.textContent = formatHHMMSS(msLeft);
      if (msLeft <= 0) {
        await refreshDailyUI();
      }
    };
    tick();
    setInterval(tick, 1000);
  }

  // –°–≤–∞–π–ø-—Å—Ç–µ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
  const stack = document.getElementById('homeSwipeStack');
  const applyBtn = document.getElementById('homeApplyFiltersBtn');
  const cityFilter = document.getElementById('homeCityFilter');

  let routes = [];
  let currentIndex = 0;

  function renderCard(route) {
    const el = document.createElement('div');
    el.className = 'swipe-card';
    el.innerHTML = `<h4>${route.title}</h4>
      <div class="route-meta">‚è±Ô∏è ${route.time_minutes} –º–∏–Ω ¬∑ üí∞ ${route.budget}‚ÇΩ</div>
      <div class="route-description">${route.description}</div>
      <div class="muted">–ì–æ—Ä–æ–¥: ${route.city}</div>
      ${Array.isArray(route.points) && route.points.length ? '<div class="route-map" style="height: 360px; border-radius: 12px; margin-top: 10px;"><div id="homeRouteMap" style="width:100%; height:100%"></div></div>' : ''}`;
    return el;
  }

  function layoutStack() {
    if (!stack) return;
    stack.innerHTML = '';
    if (!routes.length) {
      stack.innerHTML = '<div class="loading-routes">–ú–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ—Ç</div>';
      return;
    }
    
    if (currentIndex >= routes.length) {
      stack.innerHTML = '<div class="loading-routes">–ë–æ–ª—å—à–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ—Ç</div>';
      return;
    }

    const currentRoute = routes[currentIndex];
    const card = renderCard(currentRoute);
    stack.appendChild(card);

    if (Array.isArray(currentRoute.points) && currentRoute.points.length && window.ymaps) {
      ymaps.ready(() => {
        const container = document.getElementById('homeRouteMap');
        if (!container) return;
        const map = new ymaps.Map(container, { center: [55.76, 37.64], zoom: 10, controls: ['zoomControl'] });
        const points = currentRoute.points.map(p => [p.lat, p.lon]);
        const pmList = currentRoute.points.map(p => new ymaps.Placemark([p.lat, p.lon], { hintContent: p.name, balloonContent: p.name }, { preset: 'islands#pinkDotIcon' }));
        pmList.forEach(pm => map.geoObjects.add(pm));
        if (points.length >= 2) {
          ymaps.route(points, { mapStateAutoApply: true }).then(route => {
            route.options.set({ strokeColor: '#ff7eb9', strokeWidth: 4, strokeOpacity: 0.8 });
            map.geoObjects.add(route);
            map.setBounds(route.getBounds(), { checkZoomRange: true, zoomMargin: 30 });
          }).catch(() => { if (map.geoObjects.getBounds()) map.setBounds(map.geoObjects.getBounds(), { checkZoomRange: true, zoomMargin: 30 }); });
        } else if (points.length === 1) {
          map.setCenter(points[0], 14);
        }
      });
    }
  }

  async function loadRoutes() {
    if (!stack) return;
    stack.innerHTML = '<div class="loading-routes">–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤...</div>';
    try {
      const params = cityFilter && cityFilter.value ? { city: cityFilter.value } : {};
      const [allRoutes, favorites] = await Promise.all([
        API.routes(params),
        (async () => { try { return await API.getFavorites(); } catch { return []; } })(),
      ]);
      const favoriteIds = new Set((favorites || []).map(r => r.id));
      routes = (allRoutes || []).filter(r => !favoriteIds.has(r.id));
      currentIndex = 0;
      layoutStack();
    } catch (e) {
      stack.innerHTML = '';
      UI.showModal('–û—à–∏–±–∫–∞', e.message);
    }
  }

  async function swipeRight() {
    if (!routes.length || currentIndex >= routes.length) return;
    
    const currentRoute = routes[currentIndex];
    try {
      await API.addToFavorites(currentRoute.id);
    } catch (e) {
      // –ü–æ–¥–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ ¬´–ú–∞—Ä—à—Ä—É—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º¬ª
      if (!String(e.message || '').includes('–ú–∞—Ä—à—Ä—É—Ç —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º')) {
        UI.showModal('–û—à–∏–±–∫–∞', e.message);
      }
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É
    currentIndex++;
    layoutStack();
  }

  function swipeLeft() {
    if (!routes.length || currentIndex >= routes.length) return;
    
    // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É
    currentIndex++;
    layoutStack();
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  applyBtn?.addEventListener('click', loadRoutes);

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∂–µ—Å—Ç–æ–≤: –≤–ª–µ–≤–æ ‚Äî skip, –≤–ø—Ä–∞–≤–æ ‚Äî –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
  if (stack) {
    let startX = 0;
    let isTouch = false;
    let currentCard = null;

    const onStart = (x) => { 
      startX = x; 
      isTouch = true;
      currentCard = stack.querySelector('.swipe-card');
    };

    const onMove = (x) => {
      if (!isTouch || !currentCard) return;
      const dx = x - startX;
      currentCard.style.transform = `translateX(${dx}px) rotate(${dx/25}deg)`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
      if (dx > 50) {
        currentCard.style.borderColor = '#28a745';
        currentCard.style.backgroundColor = '#f8fff9';
      } else if (dx < -50) {
        currentCard.style.borderColor = '#dc3545';
        currentCard.style.backgroundColor = '#fff8f8';
      } else {
        currentCard.style.borderColor = '#eee';
        currentCard.style.backgroundColor = '#fff';
      }
    };

    const onEnd = (x) => {
      if (!isTouch || !currentCard) return;
      isTouch = false;
      const dx = x - startX;
      const threshold = 80;
      
      if (Math.abs(dx) < threshold) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –º–µ—Å—Ç–æ
        currentCard.style.transform = '';
        currentCard.style.borderColor = '#eee';
        currentCard.style.backgroundColor = '#fff';
        return;
      }
      
      // –ê–Ω–∏–º–∞—Ü–∏—è —Å–≤–∞–π–ø–∞
      const direction = dx > 0 ? 1 : -1;
      currentCard.style.transform = `translateX(${direction * 500}px) rotate(${direction * 20}deg)`;
      currentCard.style.opacity = '0';
      
      setTimeout(() => {
        if (dx > 0) {
          swipeRight();
        } else {
          swipeLeft();
        }
      }, 300);
    };

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ —Å–≤–∞–π–ø–µ
    stack.addEventListener('selectstart', (e) => e.preventDefault());
    stack.addEventListener('mousedown', (e) => {
      e.preventDefault();
      onStart(e.clientX);
    });
    window.addEventListener('mousemove', (e) => onMove(e.clientX));
    window.addEventListener('mouseup', (e) => onEnd(e.clientX));

    stack.addEventListener('touchstart', (e) => {
      e.preventDefault();
      onStart(e.touches[0].clientX);
    }, { passive: false });
    stack.addEventListener('touchmove', (e) => {
      e.preventDefault();
      onMove(e.touches[0].clientX);
    }, { passive: false });
    stack.addEventListener('touchend', (e) => {
      e.preventDefault();
      onEnd(e.changedTouches[0].clientX);
    });
  }

  // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  loadRoutes();
  refreshDailyUI();
  startDailyCountdown();
});
